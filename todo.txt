Legend: 
    {!} -> bug,
    [!] -> functionality removed,
    [*] -> to be rethinked,
    
Done:
    ECS,
        [x] -> Entities,
        [x] -> System management,
        [x] -> Component types,
    [x] -> rewrite to TS,
    [x] -> setup proj and vim,
    [x] -> {!} Created systems should take eventAggregator as an import,

    GraphicManager,
        [x] -> Draw basic shapes for debugging, or basics particle effects, 
        [x] -> Draw text,
        [x] -> Draw texture,
        [x] -> Draw texture fragment (sprite),
        [x] -> Test site with canvas 

    Animations Manager,
        [x] -> Static animations poc,
        [x] -> Static animations,
        [x] -> Skeleton,
        [x] -> Skeletal animations poc,
        [x] -> Skeletal animations,
            [x] -> Multiple childJoins from one join,
            [x] -> Multiple animation at once (in one skeleton),
            [!] -> Easing functions, 
        [x] -> multiple animations states (run -> on right arrow, hit -> on space),
        [x] -> Connect skeletal animations with static animations (add texture),
        [x] -> Skelet with bones with actual animated textures,
        [x] -> Cleaning code for nice components 
        [x] -> Prepare code for ECS pattern (separate texture animations from skeletal animations),

        [x] -> Prepare demo -> 
                [x] Player (bone texture animations) -> With armor changes
                [x] static box,
                [x] tree (static looped animation), 
                [x] just bone animation,
        [x] -> Documentation and DONE!
    
    UIManager,
        [x] -> add shadow root for gameUI component
        [x] -> Button
            [x] -> create button for game,
            [x] -> add additional event on button -> hover, pressed, released,
            [x] -> add additional property that will filter what events should send button (not all button will send hover events);

    InputManager,
        [x] -> handle for keyboard events - isDown, isPressed
        [x] -> Mouse 
            [x] -> cursor position, 

    AssetsManagement,
        [x] -> create asset manager for Object Assets management,
        [x] -> create asset loader,
            [x] -> progress in % (or to load -> loaded values)

Todo:

    target: is creating set of systems that will help me creating my own game. Designing architecture and communication of different parts of game.

    - ECS, x
    - GraphicManager (canvas), x
    - AnimationsManager, x
    - SoundManagement,
    - UIManager, 
    - AssetsLoader, x
    - InputManager, x
    - StateManager,
    - LoadSaveStateManager,


    ECS 
        [ ] -> {!} Component types for system should be defined in system class not when creating one,

    UIManager,
        [ ] -> Way of creating and applying styles for gameUI component,
        [ ] -> Input
            [ ] -> create basic input component,
            [ ] -> events buttonslike logic (events: hover, focus, blur, out, changed), 
        [ ] -> documentation,

    [ ] -> {!} Sprite add total number of frames,

    InputManager
        [ ] -> mouse 
            [ ] -> button1 and 2 - down, pressed (I need an actual mouse to test it :/ )
        
    [ ] -> Animation Manager,
        [ ] -> unit tests


    [ ] -> Debugging tools,
        [] -> Debug drawing tools,

        
    [ ] -> SceneManager
        [ ] -> unit tests for SceneManager,
        
    [ ] -> SoundManager
        [ ] -> unit tests for SoundManager,
    [ ] -> importing and exporting state from ECS,

ToDo_v2:

    Fixes for bugs and creating game

    Animation manager 
        [ ] -> angle animation:
            [ ] -> increase animation not from - to,
            [ ] -> change step (not fluid but change angle f.e by 2 degrees)

    ECS,
        [ ] -> Pasue/resume functions,
        [ ] -> Get entity reference by entityId,
        [ ] -> Way of creating component that has to be an interface,

    [ ] -> {!} Join points werid position

